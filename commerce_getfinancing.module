<?php

/**
 * @file
 * Implements GetFinancing payment services for use with Drupal Commerce.
 */

/**
 * Implements hook_menu().
 */
function commerce_getfinancing_menu() {
  $items = array();

  $items['cart/getfinancing/complete'] = array(
    'title' => 'Order complete using GetFinancing',
    'page callback' => 'commerce_getfinancing_complete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['cart/getfinancing/order_complete'] = array(
    'title' => 'User Redirect after order complete using GetFinancing',
    'page callback' => 'commerce_getfinancing_order_complete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_getfinancing_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['getfinancing'] = array(
    'base' => 'commerce_getfinancing',
    'title' => t('GetFinancing'),
    'short_title' => t('GetFinancing'),
    'description' => t('GetFinancing'),
    'active' => FALSE,
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => FALSE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_getfinancing_settings_form($settings = NULL) {
  $form = array();

  $settings = (array) $settings + array(
    'entorno' => 'test',
    'username' => '',
    'password' => '',
    'merchant_id' => '',
  );
  $form['entorno'] = array(
    '#type' => 'select',
    '#title' => t('Environment'),
    '#options' => array(
      'test' => t('test'),
      'real' => t('real'),
    ),
    '#multiple' => FALSE,
    '#description' => t('Process in real or test mode'),
    '#default_value' => $settings['entorno'],
  );
  $form['username'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#description' => t('account username'),
    '#default_value' => $settings['username'],
  );
  $form['password'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#description' => t('account password'),
    '#default_value' => $settings['password'],
  );
  $form['merchant_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant ID'),
    '#description' => t('account merchant id'),
    '#default_value' => $settings['merchant_id'],
  );
  return $form;
}

/**
 * Redirect form, a wrapper function for building a form.
 */
function commerce_getfinancing_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if the enabling action's settings haven't been configured.
  if (empty($payment_method['settings']['username']) || empty($payment_method['settings']['merchant_id'])) {
    drupal_set_message(t('GetFinancing is not configured for use. No account credentials have been specified.'), 'error');
    return array();
  }

  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

 

  $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();
  $state_code = commerce_getfinancing_get_state_name($billing_address['administrative_area'], $billing_address['country']);

   $merchant_loan_id = md5(time() . $payment_method['settings']['merchant_id'] .$billing_address['first_name'] .$order_wrapper->commerce_order_total->amount->value());
  //$merchant_loan_id = $order->order_id;
   commerce_getfinancing_save_order_id($merchant_loan_id,$order->order_id);
    // Shipping.
    $shipping_amount=0;
    foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
      if ($line_item_wrapper->type->value() == "shipping") {
        // Shipping data.
        $shipping_amount += $line_item_wrapper->value()->data['shipping_service']['base_rate']['amount'];
      }
    }

  $product_info="";
  $cart_items = array();
  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
      $product_id = $line_item_wrapper->commerce_product->product_id->value();
      $product = commerce_product_load($product_id);
      $price = commerce_product_calculate_sell_price($product);
      $product_info[] = $product->title . " (" . $line_item_wrapper->quantity->value() . ")";
      //$cart_items[]=json_encode(array("display_name" => $product->title,"quantity" => $line_item_wrapper->quantity->value(),"unit_price" => number_format($price['amount']/100,2,'.','')));
      // Item descriptions.
        $cart_items[] = array(
                'sku' => $product->sku,
                'display_name' => $product->title,
                'unit_price' => number_format($price['amount']/100,2,'.',''),
                'quantity' => (int)$line_item_wrapper->quantity->value(),
                'unit_tax' => 0
             );
    }
  }

  $gf_data = array(
      'amount'           => number_format($order_wrapper->commerce_order_total->amount->value() / 100,2,'.',''),
      'cart_items'     => $cart_items,
      //'product_info'     => implode(',',$product_info),
      'first_name'       => $billing_address['first_name'],
      'last_name'        => $billing_address['last_name'],
      'shipping_address' => array(
          'street1'  => $billing_address['thoroughfare'],
          'city'    => $billing_address['locality'],
          'state'   => $billing_address['administrative_area'],
          'zipcode' => $billing_address['postal_code']
      ),
      'billing_address' => array(
          'street1'  => $billing_address['thoroughfare'],
          'city'    => $billing_address['locality'],
          'state'   => $billing_address['administrative_area'],
          'zipcode' => $billing_address['postal_code']
      ),
      'version'          => '1.9',
      'shipping_amount'  => number_format($shipping_amount/100,2,'.',''),
      'email'            => drupal_substr($order->mail, 0, 255),
      'merchant_loan_id' => $merchant_loan_id
  );



   $body_json_data =json_encode($gf_data,JSON_UNESCAPED_SLASHES);
   $header_auth = base64_encode( $payment_method['settings']['username'] . ":" . $payment_method['settings']['password']);

    $post_args = array(
        'body' => $body_json_data,
        'timeout' => 60,     // 60 seconds
        'blocking' => true,  // Forces PHP wait until get a response
        'headers' => array(
          'Content-Type' => 'application/json',
          'Authorization' => 'Basic ' . $header_auth,
          'Accept' => 'application/json'
         )
    );

    if ($payment_method['settings']['entorno'] == "test") {
        $url = 'https://api-test.getfinancing.com/merchant/' . $payment_method['settings']['merchant_id'] . '/requests';
    } else {
        $url = 'https://api.getfinancing.com/merchant/' . $payment_method['settings']['merchant_id'] . '/requests';
    }
    
    $gf_response = commerce_getfinancing_remote_post( $url, $post_args );

    $gf_response = json_decode($gf_response);

      $args = array(
    'oid' => $order->order_id ,
  );

  $ok_url = url('cart/getfinancing/order_complete', array('absolute' => TRUE, 'query' => $args));
  $nok_url = check_url(url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)));

  drupal_add_js('https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js', 'external');
  drupal_add_js('https://cdn.getfinancing.com/libs/1.0/getfinancing.js', 'external');
  $redirect=$order->data['payment_redirect_key'];
     $inlineJS = <<<EOT
                  var onComplete = function() {
                  // Emulates onclick
                  window.location.href="$ok_url";
              };

              var onAbort = function() {
                  window.location.href="$nok_url";
              };

               setTimeout(function(){
                 new GetFinancing("$gf_response->href", onComplete, onAbort);
               },3000);
EOT;
  drupal_add_js($inlineJS, 'inline');

   
  return array();
}

/**
 * Callback function for posted GetFinancing payment response.
 */
function commerce_getfinancing_complete() {
  $json = file_get_contents('php://input');

  $notification = json_decode($json, TRUE);
  if (isset($notification['updates']['status']) && $notification['updates']['status'] == 'approved') {

    $merchant_transaction_id = $notification['merchant_transaction_id'];

    $order_id = commerce_getfinancing_get_order_id($merchant_transaction_id);
    $order = commerce_order_load($order_id['order_id']);
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    $transaction = commerce_payment_transaction_new('getfinancing', $order->order_id);
    $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
    $transaction->message = "GetFinancing payment received for order: " . $order->order_id;
    $transaction->remote_id = $notification['merchant_transaction_id'];
    $transaction->amount = commerce_currency_decimal_to_amount($order_wrapper->commerce_order_total->amount->value()/100, $order_wrapper->commerce_order_total->currency_code->value());
    $transaction->currency_code = $order_wrapper->commerce_order_total->currency_code->value();
    commerce_order_status_update($order, 'processing', FALSE, TRUE, 'Your payment has been successfully completed');
    commerce_payment_transaction_save($transaction);
    commerce_payment_redirect_pane_next_page($order);

    $args = array(
      'oid' => $order_id,
    );
    $redirect_url = url('cart/getfinancing/order_complete', array('absolute' => TRUE, 'query' => $args));

    $output  = "<html><head><title>Processing Payment</title><script language=\"javascript\">\n";
    $output .= "<!--\n";
    $output .= "window.location.href=\"{$redirect_url}\"\n";
    $output .= "//-->\n";
    $output .= "</script></head><body>\n";
    $output .= "<noscript><meta http-equiv=\"refresh\" content=\"1;url={$redirect_url}\"></noscript>\n";
    $output .= '<p style="text-align: center">Processing your payment; please wait...</p>';
    $output .= "<p style=\"text-align: center\"><a href=\"{$redirect_url}\">Please click here if you are not automatically redirected to the next step.</a></p></body></html>";

    // Return it as a post response and exit.

    print $output;
    exit();
  }
}

/**
 * Callback function triggered by GetFinancing.
 */
function commerce_getfinancing_order_complete() {
  $order_id = $_GET['oid'];
  watchdog('commerce_getfinancing', 'Receiving redirect response for order !order_id from GetFinancing', array('!order_id' => $order_id));

  // Validate posted data.
  if ($order = commerce_order_load($order_id)) {
    drupal_goto('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key']);
  }

  // Payment failed; return to checkout.
  drupal_set_message($message, 'error');
  drupal_goto('cart');
}

/**
 * Returns a state name given a state code.
 */
function commerce_getfinancing_get_state_name($state_code, $country_code = NULL) {
  if ($state_code) {
    $state_code = drupal_strtoupper($state_code);
    $country_code = $country_code ? drupal_strtoupper($country_code) : 'US';

    $address['country'] = $country_code;
    $format_handlers = array('address');
    $context = array('mode' => 'form');
    $address_element = addressfield_generate($address, $format_handlers, $context);
    if (!empty($address_element['locality_block']['administrative_area']['#options'])) {
      $state_options = $address_element['locality_block']['administrative_area']['#options'];
      $state_options = array_change_key_case($state_options, CASE_UPPER);
      return isset($state_options[$state_code]) ? $state_options[$state_code] : '';
    }
  }
}

function commerce_getfinancing_remote_post($url,$args=array()) {
    $curl = curl_init();

    curl_setopt($curl, CURLOPT_URL, $url);
    curl_setopt($curl, CURLOPT_FRESH_CONNECT, true);
    curl_setopt($curl, CURLOPT_POST, true);
    curl_setopt($curl, CURLOPT_POSTFIELDS, $args['body']);
    curl_setopt($curl, CURLOPT_USERAGENT, 'DrupalCommerce - GetFinancing Payment Module ');
    if (defined('CURLOPT_POSTFIELDSIZE')) {
        curl_setopt($curl, CURLOPT_POSTFIELDSIZE, 0);
    }
    curl_setopt($curl, CURLOPT_TIMEOUT, $args['timeout']);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($curl, CURLOPT_FOLLOWLOCATION, false);
    curl_setopt($curl, CURLOPT_HEADER, 0);
    $array_headers = array();
    foreach ($args['headers'] as $k => $v) {
        $array_headers[] = $k . ": " . $v;
    }
    if (sizeof($array_headers)>0) {
      curl_setopt($curl, CURLOPT_HTTPHEADER, $array_headers);
    }

    if (strtoupper(substr(@php_uname('s'), 0, 3)) === 'WIN') {
        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);
        curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, false);
    }

    $resp = curl_exec($curl);
    curl_close($curl);

    if (!$resp) {
      return false;
    } else {
      return $resp;
    }
}


/**
 * Convert marchantg loan id to order_id
 *
 * @param $merchant_loan_id
 *   The merchant_loan_id of the request
 *
 * @return
 *   The original order_id to start processing.
 */
function commerce_getfinancing_get_order_id($merchant_loan_id) {
  return db_select('commerce_getfinancing', 'order_id')
    ->fields('order_id')
    ->condition('merchant_loan_id', $merchant_loan_id,'=')
    ->execute()
    ->fetchAssoc();
}

/**
 * Saves an IPN with some meta data related to local processing.
 *
 * @param $ipn
 *   An IPN array with additional parameters for the order_id and Commerce
 *     Payment transaction_id associated with the IPN.
 *
 * @return
 *   The operation performed by drupal_write_record() on save; since the IPN is
 *     received by reference, it will also contain the serial numeric ipn_id
 *     used locally.
 */
function commerce_getfinancing_save_order_id($merchant_loan_id,$order_id) {
  if (!empty($merchant_loan_id) && !empty($order_id)) {
    $gf['created'] = REQUEST_TIME;
    $gf['merchant_loan_id'] = $merchant_loan_id;
    $gf['order_id'] = $order_id;

    return drupal_write_record('commerce_getfinancing', $gf);
  }else{
    return false;
  }

}
